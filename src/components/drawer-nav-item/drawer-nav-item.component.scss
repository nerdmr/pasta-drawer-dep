@import '../../styles/variables.scss';

$color-inner-drawer: #efefef;
$color-front-drawer: white;

$front-drawer-br: 3px;
$front-drawer-border: solid #efefef 1px;

$width: 75px;
$height: 20px;
$perspective: $width;

$drawer-lip-size: 3px;
$knob-size: 10px;
$knob-color: #cccc;

// When perspective = width, the width front panel width is 2xWidth
$perspective-padding-offset-lr: ($width / 2) + $drawer-lip-size * 2;
$perspective-padding-offset-tb: ($height / 2) + $drawer-lip-size * 2;

$shadow-factor: 10%;
$clipping-offset: 2px;


@mixin active {
    transform: rotate3d(1, 0, 0, -30deg);
}

.drawer-nav-item {
    
    padding: $perspective-padding-offset-tb $perspective-padding-offset-lr;

    &__inner {
        width: $width;
        height: $height;
        transform-style: preserve-3d;
        transition: transform .15s;
        
        transform: rotate3d(1, 0, 0, 0deg);

        margin: 0 auto;

        &:hover, &.active {
            @include active();
        }

        perspective: $perspective;
    }

    &__inner > * {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        position: absolute;
        backface-visibility: inherit;
    }

    &__front {
        transform: translateZ($width / 2);
        
        /* FACE */
        &::before {
            content: '';
            position: absolute;
            background: $color-front-drawer;
            width: $width + $drawer-lip-size * 2;
            height: $height + $drawer-lip-size * 2;
            top: -$drawer-lip-size;
            left: -$drawer-lip-size;

            border: $front-drawer-border;
            border-radius: $front-drawer-br;
            box-sizing: border-box;
        }

        /* KNOB */
        &::after {
            
            content: '';
            position: absolute;
            width: $knob-size;
            height: $knob-size;
            border-radius: 50%;

            background: $knob-color;
        }
    }
    
    &__back {
        background: $color-inner-drawer;
        height: $height - ($clipping-offset * 2);
        width: $width - ($clipping-offset * 2);
        transform: rotateY(180deg) translateZ($width / 2 - ($clipping-offset * 2)) translateX(-$clipping-offset);
    }
    
    &__right {
      background: darken($color-inner-drawer, $shadow-factor);
      transform: rotateY(90deg) translateZ($width / 2 - $clipping-offset);
    }
    
    &__left {
      background: darken($color-inner-drawer, $shadow-factor);
      transform: rotateY(-90deg) translateZ($width / 2 - $clipping-offset);
    }
    
    &__top {    
      transform: rotateX(90deg) translateZ($height / 2);
    }
    
    &__bottom {
        background: darken($color-inner-drawer, .75 * $shadow-factor);

      transform: rotateX(-90deg) translateZ(((-.5 * $width) + ($height)) - $clipping-offset);

      height: $width;

    }
}